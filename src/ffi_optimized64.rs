/* automatically generated by rust-bindgen 0.72.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TurboSHAKE_InstanceStruct {
    pub state: [u8; 200usize],
    pub rate: ::std::os::raw::c_uint,
    pub byteIOIndex: u8,
    pub squeezing: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TurboSHAKE_InstanceStruct"]
        [::std::mem::size_of::<TurboSHAKE_InstanceStruct>() - 208usize];
    ["Alignment of TurboSHAKE_InstanceStruct"]
        [::std::mem::align_of::<TurboSHAKE_InstanceStruct>() - 4usize];
    ["Offset of field: TurboSHAKE_InstanceStruct::state"]
        [::std::mem::offset_of!(TurboSHAKE_InstanceStruct, state) - 0usize];
    ["Offset of field: TurboSHAKE_InstanceStruct::rate"]
        [::std::mem::offset_of!(TurboSHAKE_InstanceStruct, rate) - 200usize];
    ["Offset of field: TurboSHAKE_InstanceStruct::byteIOIndex"]
        [::std::mem::offset_of!(TurboSHAKE_InstanceStruct, byteIOIndex) - 204usize];
    ["Offset of field: TurboSHAKE_InstanceStruct::squeezing"]
        [::std::mem::offset_of!(TurboSHAKE_InstanceStruct, squeezing) - 205usize];
};
pub type TurboSHAKE_Instance = TurboSHAKE_InstanceStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KangarooTwelve_InstanceStruct {
    pub queueNode: TurboSHAKE_Instance,
    pub finalNode: TurboSHAKE_Instance,
    pub fixedOutputLength: usize,
    pub blockNumber: usize,
    pub queueAbsorbedLen: ::std::os::raw::c_uint,
    pub phase: ::std::os::raw::c_int,
    pub securityLevel: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KangarooTwelve_InstanceStruct"]
        [::std::mem::size_of::<KangarooTwelve_InstanceStruct>() - 448usize];
    ["Alignment of KangarooTwelve_InstanceStruct"]
        [::std::mem::align_of::<KangarooTwelve_InstanceStruct>() - 8usize];
    ["Offset of field: KangarooTwelve_InstanceStruct::queueNode"]
        [::std::mem::offset_of!(KangarooTwelve_InstanceStruct, queueNode) - 0usize];
    ["Offset of field: KangarooTwelve_InstanceStruct::finalNode"]
        [::std::mem::offset_of!(KangarooTwelve_InstanceStruct, finalNode) - 208usize];
    ["Offset of field: KangarooTwelve_InstanceStruct::fixedOutputLength"]
        [::std::mem::offset_of!(KangarooTwelve_InstanceStruct, fixedOutputLength) - 416usize];
    ["Offset of field: KangarooTwelve_InstanceStruct::blockNumber"]
        [::std::mem::offset_of!(KangarooTwelve_InstanceStruct, blockNumber) - 424usize];
    ["Offset of field: KangarooTwelve_InstanceStruct::queueAbsorbedLen"]
        [::std::mem::offset_of!(KangarooTwelve_InstanceStruct, queueAbsorbedLen) - 432usize];
    ["Offset of field: KangarooTwelve_InstanceStruct::phase"]
        [::std::mem::offset_of!(KangarooTwelve_InstanceStruct, phase) - 436usize];
    ["Offset of field: KangarooTwelve_InstanceStruct::securityLevel"]
        [::std::mem::offset_of!(KangarooTwelve_InstanceStruct, securityLevel) - 440usize];
};
pub type KangarooTwelve_Instance = KangarooTwelve_InstanceStruct;
unsafe extern "C" {
    #[doc = " Function to initialize a KangarooTwelve instance.\n @param  ktInstance      Pointer to the instance to be initialized.\n @param  securityLevel   128 for KT128 or 256 for KT256\n @param  outputByteLen   The desired number of output bytes,\n                         or 0 for an arbitrarily-long output.\n @return 0 if successful, 1 otherwise."]
    pub fn KangarooTwelve_Initialize(
        ktInstance: *mut KangarooTwelve_Instance,
        securityLevel: ::std::os::raw::c_int,
        outputByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Function to give input data to be absorbed.\n @param  ktInstance      Pointer to the instance initialized by KangarooTwelve_Initialize().\n @param  input           Pointer to the input message data (M).\n @param  inputByteLen    The number of bytes provided in the input message data.\n @return 0 if successful, 1 otherwise."]
    pub fn KangarooTwelve_Update(
        ktInstance: *mut KangarooTwelve_Instance,
        input: *const ::std::os::raw::c_uchar,
        inputByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Function to call after all the input message has been input, and to get\n output bytes if the length was specified when calling KangarooTwelve_Initialize().\n @param  ktInstance      Pointer to the hash instance initialized by KangarooTwelve_Initialize().\n If @a outputByteLen was not 0 in the call to KangarooTwelve_Initialize(), the number of\n     output bytes is equal to @a outputByteLen.\n If @a outputByteLen was 0 in the call to KangarooTwelve_Initialize(), the output bytes\n     must be extracted using the KangarooTwelve_Squeeze() function.\n @param  output          Pointer to the buffer where to store the output data.\n @param  customization   Pointer to the customization string (C).\n @param  customByteLen   The length of the customization string in bytes.\n @return 0 if successful, 1 otherwise."]
    pub fn KangarooTwelve_Final(
        ktInstance: *mut KangarooTwelve_Instance,
        output: *mut ::std::os::raw::c_uchar,
        customization: *const ::std::os::raw::c_uchar,
        customByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Function to squeeze output data.\n @param  ktInstance     Pointer to the hash instance initialized by KangarooTwelve_Initialize().\n @param  data           Pointer to the buffer where to store the output data.\n @param  outputByteLen  The number of output bytes desired.\n @pre    KangarooTwelve_Final() must have been already called.\n @return 0 if successful, 1 otherwise."]
    pub fn KangarooTwelve_Squeeze(
        ktInstance: *mut KangarooTwelve_Instance,
        output: *mut ::std::os::raw::c_uchar,
        outputByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
